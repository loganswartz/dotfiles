#!/usr/bin/env bash

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -uo pipefail

NAME="$(basename "$0")"
DEFAULT_SAVE_FOLDER="$(xdg-user-dir VIDEOS)"

function autogenerate-filename() {
  echo "$DEFAULT_SAVE_FOLDER/$(date +'%Y-%m-%d_%H-%M-%S').mkv"
}

function print-help() {
  read -r -d '' HELP <<-EOF
Usage: $NAME [OPTION...] [OUTPUT]

Take a screen recording.

If no OUTPUT is provided, the screen recording will be saved into
"$DEFAULT_SAVE_FOLDER", and the filename will be echoed to stdout. If OUTPUT is
provided, the screen recording will be saved there. If OUTPUT is "-", the
screen recording will be piped to stdout.

Arguments:
  OUTPUT     Where to output the screen recording to. If not provided, the
             screen recording will be saved somewhere appropriate. If '-', the
             recording will piped to stdout.

Options:
  -c, --clipboard    Copy the screen recording to the clipboard.
  -g, --gif          Output the screen recording as a GIF.
  -h, --help         Display this help and exit
EOF
  echo "$HELP" >&2

  exit 0
}

POSITIONAL_ARGS=()
CLIPBOARD=0
AS_GIF=0

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print-help
      ;;
    -c|--clipboard)
      CLIPBOARD=1
      shift
      ;;
    -g|--gif)
      AS_GIF=1
      shift
      ;;
    -)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
    --*|-*)
      if [[ ${#POSITIONAL_ARGS[@]} -eq 0 ]]; then
        echo "Unknown option $1" >&2
        exit 1
      fi
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

RAW_OUTPUT="${1:-}"

PIPE_FILE_TO_STDOUT=0
if [[ "$RAW_OUTPUT" == "-" ]]; then
  PIPE_FILE_TO_STDOUT=1
fi

if [[ $PIPE_FILE_TO_STDOUT == 1 && $CLIPBOARD == 1 ]]; then
  echo "Cannot use --clipboard with -"
  exit 1
fi

function cleanup() {
  if [[ $PIPE_FILE_TO_STDOUT == 1 ]]; then
    notify-send "Echoed to stdout"
  elif [[ $CLIPBOARD == 1 ]]; then
    notify-send "Screen recording copied to clipboard"
  else
    notify-send "Screen recording saved to $OUTPUT"
  fi
}

function stop() {
  echo "Stopping screen recording..." >&2
  pkill -SIGINT wf-recorder
}

trap cleanup EXIT
trap stop SIGINT

EXTRA_ARGS=()

if [[ $AS_GIF == 1 ]]; then
  EXTRA_ARGS+=(-F fps=30 -c gif -m gif)
else
  EXTRA_ARGS+=(-m matroska)
fi

if [[ $PIPE_FILE_TO_STDOUT == 1 ]]; then
  OUTPUT="pipe:9"
  wf-recorder -g "$(select-screen-region)" "${EXTRA_ARGS[@]}" -f "$OUTPUT" "$@" 9>&1 >&2
elif [[ $CLIPBOARD == 1 ]]; then
  OUTPUT="pipe:9"
  # wl-copy is a major pain and doesn't like to do anything if it's even close to being directly in the pipeline
  exec 9<> /tmp/screenrecord
  wf-recorder -g "$(select-screen-region)" "${EXTRA_ARGS[@]}" -f "$OUTPUT" "$@" >&2
  wl-copy < /tmp/screenrecord
  exec 9>&-
else
  OUTPUT="${RAW_OUTPUT:-"$(autogenerate-filename)"}"
  wf-recorder -g "$(select-screen-region)" "${EXTRA_ARGS[@]}" -f "$OUTPUT" "$@"
fi
