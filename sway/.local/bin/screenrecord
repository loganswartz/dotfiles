#!/usr/bin/env bash

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -uo pipefail

NAME="$(basename "$0")"
DEFAULT_SAVE_FOLDER="$(xdg-user-dir VIDEOS)"

function print-help() {
  read -r -d '' HELP <<-EOF
Usage: $NAME [OPTION...] [OUTPUT]

Take a screen recording.

If no OUTPUT is provided, the screen recording will be saved into
"$DEFAULT_SAVE_FOLDER", and the filename will be echoed to stdout. If OUTPUT is
provided, the screen recording will be saved there. If OUTPUT is "-", the
screen recording will be piped to stdout.

Arguments:
  OUTPUT     Where to output the screen recording to. If not provided, the
             screen recording will be saved somewhere appropriate. If '-', the
             recording will piped to stdout.

Options:
  -c, --clipboard    Copy the screen recording to the clipboard (in addition to
                     the normal saving behavior)
  -g, --gif          Output the screen recording as a GIF (defaults to an MKV)
  --stop             Stop a currently running screen recording
  -t, --tempfile     Use a temporary file when autogenerating the filename
  -h, --help         Display this help and exit
EOF
  echo "$HELP" >&2

  exit 0
}

POSITIONAL_ARGS=()
CLIPBOARD=0
AS_GIF=0
STOP=0
TEMPFILE=0

UNMODIFIED_ARGS=("$@")

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print-help
      ;;
    -c|--clipboard)
      CLIPBOARD=1
      shift
      ;;
    --stop)
      STOP=1
      shift
      ;;
    -g|--gif)
      AS_GIF=1
      shift
      ;;
    -t|--tempfile)
      TEMPFILE=1
      shift
      ;;
    -)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
    --*|-*)
      if [[ ${#POSITIONAL_ARGS[@]} -eq 0 ]]; then
        echo "Unknown option $1" >&2
        exit 1
      fi
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

LOCKFILE="/tmp/screenrecord.lock"

# if stopping, just read the lockfile for the existing PID
if [[ $STOP == 1 ]]; then
  if [[ ! -f "$LOCKFILE" ]]; then
    echo "No screen recording in progress." >&2
    exit 0
  fi

  echo "Found process with ID $(< "$LOCKFILE"), killing it..." >&2
  kill "$(< "$LOCKFILE")"
  exit 0
fi

# otherwise, run a nested instance of this script to acquire the lock
if [[ "${FLOCKER:-}" != "$0" ]]; then
  env FLOCKER="$0" flock --nonblock -E 200 "$LOCKFILE" "$0" "${UNMODIFIED_ARGS[@]}"
  rc=$?

  if [[ "$rc" == 200 ]]; then
    echo "Another instance of $NAME is already running." >&2
    exit 1
  fi

  exit $rc
fi

# if we've gotten here, this is the "one true instance", so record the PID
echo "$$" > "$LOCKFILE"

RAW_OUTPUT="${1:-}"
shift

PIPE_FILE_TO_STDOUT=0
if [[ "$RAW_OUTPUT" == "-" ]]; then
  PIPE_FILE_TO_STDOUT=1
fi

if [[ $PIPE_FILE_TO_STDOUT == 1 && $CLIPBOARD == 1 ]]; then
  echo "Cannot use --clipboard with -" >&2
  exit 1
fi

function autogenerate-filename() {
  suffix="$([ $AS_GIF == 1 ] && echo ".gif" || echo ".mkv")"
  if [[ $TEMPFILE == 1 ]]; then
    mktemp --suffix=$suffix
  else
    echo "$DEFAULT_SAVE_FOLDER/$(date +'%Y-%m-%d_%H-%M-%S')$suffix"
  fi
}

if [[ $PIPE_FILE_TO_STDOUT == 1 ]]; then
  OUTPUT="pipe:9"
else
  OUTPUT="${RAW_OUTPUT:-"$(autogenerate-filename)"}"
fi

EXTRA_ARGS=()

if [[ $AS_GIF == 1 ]]; then
  EXTRA_ARGS+=(-F fps=30 -c gif -m gif)
else
  EXTRA_ARGS+=(-m matroska)
fi

if ! REGION="$(select-screen-region 2> /dev/null)"; then
  echo "Aborted!" >&2
  exit 1
fi

OLD_MODE="$(swaymsg -t get_binding_state | jq -r '.name')"

function cleanup() {
  echo "Stopping screen recording..." >&2

  pidwait -INT -P "$$" 2> /dev/null

  swaymsg mode "$OLD_MODE"

  if [[ $PIPE_FILE_TO_STDOUT == 1 ]]; then
    echo "Recording echoed to stdout!" >&2
  else
    echo "Recording saved to:" >&2
    echo "$OUTPUT"
  fi

  if [[ $CLIPBOARD == 1 ]]; then
    wl-copy -t text/uri-list "file://$OUTPUT"
    echo "Recording copied to clipboard!" >&2
  fi

  rm "$LOCKFILE" 2> /dev/null
}

trap cleanup EXIT

swaymsg mode "screencap"

# wf-recorder outputs some logging to stdout, so we can't use that for dumping
# the raw file
wf-recorder -g "$REGION" "${EXTRA_ARGS[@]}" -f "$OUTPUT" -y "$@" 9>&1 >&2
